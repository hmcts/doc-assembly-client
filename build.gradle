plugins {
  id 'maven-publish'
  id 'java-library'
  id 'checkstyle'
  id 'io.spring.dependency-management' version '1.1.7'
  id 'org.springframework.boot' version '3.5.6'
  id 'com.github.ben-manes.versions' version '0.53.0'
}

def buildNumber = System.getenv("RELEASE_VERSION")?.replace("refs/tags/", "") ?: "DEV-SNAPSHOT"

group = 'com.github.hmcts'
version = buildNumber

java {
  toolchain {
    languageVersion = JavaLanguageVersion.of(21)
  }
}
tasks.named("dependencyUpdates").configure {
  def isNonStable = { String version ->
    def stableKeyword = ['RELEASE', 'FINAL', 'GA'].any { qualifier -> version.toUpperCase().contains(qualifier) }
    def regex = /^[0-9,.v-]+$/
    return !stableKeyword && !(version ==~ regex)
  }
  rejectVersionIf {
    isNonStable(it.candidate.version) && !isNonStable(it.currentVersion)
  }
}

checkstyle {
  maxWarnings = 0
  toolVersion = '12.0.0'
  // need to set configDir to rootDir otherwise submodule will use submodule/config/checkstyle
  configDirectory.set(rootProject.layout.projectDirectory.dir('config/checkstyle'))
}

compileJava {
  options.compilerArgs << '-parameters' << '-Xlint:deprecation'
}

compileTestJava {
  options.compilerArgs << '-Xlint:deprecation'
}

jar {
  manifest {
    attributes 'Implementation-Title': project.name, 'Implementation-Version': project.version
  }
}

tasks.register('printVersion') {
  doLast {
    println project.version
  }
}

tasks.register('sourcesJar', Jar) {
  dependsOn classes
  archiveClassifier = 'sources'
  from sourceSets.main.allSource
}

tasks.register('javadocJar', Jar) {
  dependsOn javadoc
  archiveClassifier = 'javadoc'
  from javadoc.destinationDir
}

publishing {
  repositories {
    maven {
      name = "AzureArtifacts"
      url = uri("https://pkgs.dev.azure.com/hmcts/Artifacts/_packaging/hmcts-lib/maven/v1")
      credentials {
        username = System.getenv("AZURE_DEVOPS_ARTIFACT_USERNAME")
        password = System.getenv("AZURE_DEVOPS_ARTIFACT_TOKEN")
      }
    }
  }

  publications {
    create('Main', MavenPublication) {
      from components.java
      artifact sourcesJar
      artifact javadocJar

      artifactId = 'doc-assembly-client'

      pom {
        name = 'Doc assembly client'
        description = 'Client library for communicating with doc assembly api'
        url = 'https://github.com/hmcts/doc-assembly-client'

        licenses {
          license {
            name = "MIT License"
            url = "http://www.opensource.org/licenses/mit-license.php"
            distribution = "repo"
          }
        }
        scm {
          url = "https://github.com/hmcts/doc-assembly-client"
        }
      }
    }
  }
}

ext {
  springCloudVersion = '2025.0.0'
  junitJupiterVersion = '6.0.0'
  lombokVersion = '1.18.42'
  mockitoVersion = '5.20.0'
}

dependencies {
  api group: 'org.springframework.cloud', name: 'spring-cloud-starter-openfeign', version: '4.3.0'
  api group: 'org.springframework.boot', name: 'spring-boot-starter-actuator'
  api group: 'io.github.openfeign', name: 'feign-jackson', version: '13.6'
  annotationProcessor group: 'org.projectlombok', name: 'lombok', version: lombokVersion
  compileOnly group: 'org.projectlombok', name: 'lombok', version: lombokVersion
  testImplementation group: 'org.mockito', name: 'mockito-core', version: mockitoVersion
  testImplementation group: 'org.mockito', name: 'mockito-junit-jupiter', version: mockitoVersion
  testImplementation group: 'org.junit.jupiter', name: 'junit-jupiter-api', version: junitJupiterVersion
  testImplementation group: 'org.junit.platform', name: 'junit-platform-launcher', version: '6.0.0'
  testRuntimeOnly group: 'org.junit.jupiter', name: 'junit-jupiter-engine', version: junitJupiterVersion
}

dependencyManagement {
  imports {
    mavenBom "org.springframework.cloud:spring-cloud-dependencies:${springCloudVersion}"
  }
  dependencies {
    dependencySet(group: 'org.junit.platform', version: '6.0.0') {
        entry 'junit-platform-commons'
        entry 'junit-platform-engine'
    }
  }
}

bootJar {
  archiveClassifier = 'boot'
  enabled = false
}

jar {
  archiveClassifier = ''
  enabled = true
}

test {
  useJUnitPlatform()
}
